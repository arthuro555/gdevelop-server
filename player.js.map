{"version":3,"file":"player.js","sourceRoot":"","sources":["player.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * @fileOverview Definition of players and objects, that will contain the user data.\r\n * @author Arthur Pacaud (arthuro555)\r\n * @version 0.0.1-dev-in-progress\r\n */\r\n\r\n\r\n// Requirements\r\nlet cryptog = require('crypto');\r\nconst uuidv1 = require('uuid/v1');\r\nconst uuidv4 = require('uuid/v4');\r\nlet jwt = require('jsonwebtoken');\r\nconst settings = require(\"./confighandler.js\").config;\r\n\r\n/**\r\n * Represents an Object in a scene. Stores GDevelop objects data.\r\n * @class\r\n * @param {string} [name] - The Name of the object to know which one to spawn.\r\n * @param {string} [uuid] - The GDevelop UUID to interact with an object in particular.\r\n * @param {number} [x] - The x-coordinate position of an object.\r\n * @param {number} [y] - The y-coordinate position of an object.\r\n */\r\nexport class gdobject {\r\n    public x: number;\r\n    public y: number;\r\n    public uuid: string;\r\n    public name: string;\r\n    /** @constructor */\r\n    constructor(name, uuid, x, y){\r\n        /** @type {string} */\r\n        this.name = name;\r\n        /** @type {string} */\r\n        this.uuid = uuid;\r\n        /** @type {number} */\r\n        this.x = x;\r\n        /** @type {number} */\r\n        this.y = y;\r\n    };\r\n    update(name, uuid, x, y){\r\n        /** @type {string} */\r\n        this.name = name;\r\n        /** @type {string} */\r\n        this.uuid = uuid;\r\n        /** @type {number} */\r\n        this.x = x;\r\n        /** @type {number} */\r\n        this.y = y;\r\n    };\r\n    /**\r\n     * Returns all the gdobjects data in an Array\r\n     * @returns {Array}\r\n     */\r\n    get(){\r\n        return [this.name, this.uuid, this.x, this.y];\r\n    }\r\n}\r\n\r\n/**\r\n * Represents a Player. Authenticates players and store their login data and game data when online.\r\n * @class\r\n * @param {string} [username] - The username.\r\n * @param {string} [password] - The password (will automatically be hashed).\r\n * @param {boolean} [moderator] - Is the user an admin?\r\n * @property {Array<gdobject>} [data] - An <tt>Array</tt> containing Objects and User data.\r\n * @property {string} [_password] - The user password (Hashed).\r\n * @property {Array<string>} [_token] - An <tt>Array</tt> containing the Authentication tokens.\r\n * @property {string} [uuid] - The <tt>player</tt> Unique ID to distinguish it from other instance.\r\n * @property {string} [username] - The <tt>player</tt> Username.\r\n * @property {boolean} [online] - If the player is not online, this flag will prevent data to be modified.\r\n * @property {boolean} [moderator] - Modify this to true to let this player access Admin features (server-side).\r\n */\r\nexport class player {\r\n    public online: boolean;\r\n    public data: gdobject[];\r\n    private _password: string;\r\n    private _token: string[];\r\n    public uuid: any;\r\n    public username: any;\r\n    private moderator: boolean;\r\n    /** @constructor */\r\n    constructor(username, password, moderator=false){\r\n        /** @type {Array<gdobject>} */\r\n        this.data = [];\r\n        /**\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this._password = cryptog.createHash('sha256').update(password).digest('hex');\r\n        /**\r\n         * @type {Array<string>}\r\n         * @private\r\n         */\r\n        this._token = [];\r\n        /** @type {string} */\r\n        this.uuid = uuidv1();\r\n        /** @type {string} */\r\n        this.username = username;\r\n        /** @type {boolean} */\r\n        this.online = false;\r\n        /** @type {boolean} */\r\n        this.moderator = moderator;\r\n    };\r\n    /**\r\n     * Get an <tt>gdobject</tt> by its name (Prefer getObjectByUUID())\r\n     * @method\r\n     * @param {string} [name] - The name variable of the gdobject\r\n     * @returns {gdobject | null}\r\n     * @throws \"Trying to access data from a non-online player!\"\r\n     */\r\n    getObjectByName(name){\r\n        if (!this.online){\r\n            throw \"Trying to access data from a non-online player!\";\r\n        }\r\n        let i;\r\n        for (i = 0; i < this.data.length; i += 1) {\r\n            if (this.data[i].name === name) {\r\n                return this.data[i];\r\n            }\r\n        }\r\n        return null; //not found\r\n    };\r\n    /**\r\n     * Get an <tt>gdobject</tt> by its UUID\r\n     * @method\r\n     * @param {string} [uuid] - The uuid variable of the gdobject\r\n     * @returns {gdobject | null}\r\n     * @throws \"Trying to access data from a non-online player!\"\r\n     */\r\n    getObjectByUUID(uuid){\r\n        if (!this.online){\r\n            throw \"Trying to access data from a non-online player!\";\r\n        }\r\n        let i;\r\n        for (i = 0; i < this.data.length; i += 1) {\r\n            if (this.data[i].uuid === uuid) {\r\n                return this.data[i];\r\n            }\r\n        }\r\n        return null; //not found\r\n    };\r\n    /**\r\n     * Get an <tt>gdobject</tt>'s ID (mapping in <tt>player</tt> gdobject) by its UUID.\r\n     * @method\r\n     * @param {string} [uuid] - The uuid variable of the gdobject.\r\n     * @returns {number | null}\r\n     * @throws \"Trying to access data from a non-online player!\"\r\n     */\r\n    getObjectID(uuid){\r\n        if (!this.online){\r\n            throw \"Trying to access data from a non-online player!\";\r\n        }\r\n        let i;\r\n        for (i = 0; i < this.data.length; i += 1) {\r\n            if (this.data[i].uuid === uuid) {\r\n                return i;\r\n            }\r\n        }\r\n        return null; //not found\r\n    };\r\n    /**\r\n     * Add a gdobject to the Player.\r\n     * @method\r\n     * @param {string} [token] - The authorization/authentication token.\r\n     * @param {gdobject} [object] - The gdobject to add.\r\n     * @returns {boolean}\r\n     * @throws \"Trying to access data from a non-online player!\"\r\n     */\r\n    addObject(token, object){\r\n        if(!this.verifyToken(token)){\r\n            return false;\r\n        }\r\n        if (!this.online){\r\n            throw \"Trying to access data from a non-online player!\";\r\n        }\r\n        this.data.push(object);\r\n        return true\r\n    };\r\n    /**\r\n     * Remove a gdobject from the Player.\r\n     * @method\r\n     * @param {string} token - The authorization/authentication token.\r\n     * @param {string | null} [name] - The UUID of the gdobject to remove.\r\n     * @param {string | null} [uuid] - The name of the gdobject to remove.\r\n     * @returns {boolean}\r\n     */\r\n    removeObject(token:string, name:string = null, uuid:string = null){\r\n        if(!this.verifyToken(token)){\r\n            return false;\r\n        }\r\n        if (!this.online){\r\n            throw \"Trying to access data from a non-online player!\";\r\n        }\r\n        if(!name === null){\r\n            let id = this.getObjectID(this.getObjectByName(name).uuid);\r\n            if(id === null){\r\n               return false\r\n            }\r\n            this.data.splice(id, 1);\r\n            return true;\r\n        }\r\n        if(!uuid === null){\r\n            let id = this.getObjectID(uuid);\r\n            if(id === null){\r\n                return false\r\n            }\r\n            this.data.splice(id, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Verify if a token comes from the player and is valid.\r\n     * @method\r\n     * @param {string} [token] - The authorization/authentication token.\r\n     * @returns {boolean}\r\n     */\r\n    verifyToken(token:string){\r\n        try {\r\n            let exists = false;\r\n            let tuuid = \"nope\";\r\n            for(let t in this._token){\r\n                if(t[0] === token){\r\n                    exists = true;\r\n                    tuuid = t[1];\r\n                }\r\n            }\r\n            if(exists === false){return false}\r\n            let data = jwt.verify(token, settings[\"SECRET\"]);\r\n            return data[\"username\"] === this.username && data[\"password\"] === this._password && data[\"tokenUUID\"] === tuuid;\r\n        } catch (e){\r\n            return false;\r\n        }\r\n    };\r\n    /**\r\n     * Invalidate a Token (Aka Logout).\r\n     * @method\r\n     * @param {string} [token] - The authorization/authentication token.\r\n     * @returns {boolean}\r\n     */\r\n    removeToken(token:string){\r\n        if(this.verifyToken(token)){\r\n            let i;\r\n            for (i = 0; i < this._token.length; i += 1) {\r\n                if (this._token[i][0] === token) {\r\n                    this._token.splice(i, 0);\r\n                    return true;\r\n                }\r\n            }\r\n            return false; //not found\r\n        }\r\n    }\r\n    /**\r\n     * Verify if a token comes from the <tt>player</tt> and is valid.\r\n     * @method\r\n     * @param {string} [password] - The <tt>player</tt>'s Password\r\n     * @returns {boolean | string}\r\n     */\r\n    login(password:string){\r\n        password = cryptog.createHash('sha256').update(password).digest('hex');\r\n        if(password === this._password){\r\n            let tuuid:string = uuidv4();\r\n            let token:string = jwt.sign({\"username\": this.username, \"password\": password, \"tokenUUID\":tuuid}, settings[\"SECRET\"]);\r\n            let tarray:string[] = Array(token,tuuid);\r\n            // @ts-ignore\r\n            this._token.push(tarray);\r\n            this.online = true;\r\n            return token;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Hashes the input and compare the hash with <tt>this._password</tt>.\r\n     * @method\r\n     * @param {string} [password] - The <tt>player</tt>'s password.\r\n     * @returns {boolean}\r\n     */\r\n    verifyPassword(password:string){\r\n        return cryptog.createHash('sha256').update(password).digest('hex') === this._password;\r\n    }\r\n    /**\r\n     * Change The <tt>player</tt>'s password. Needs either a valid token or the current password.\r\n     * @method\r\n     * @param {string | null} [token] - The authorization/authentication token.\r\n     * @param {string | null} [oldPassword] - The current password.\r\n     * @param {string} [newPassword] - The new password.\r\n     * @returns {boolean}\r\n     */\r\n    modifyPassword(token:string=null, oldPassword:string=null, newPassword:string){\r\n        if(this.verifyToken(token) || this.verifyPassword(oldPassword)){\r\n            this._password = cryptog.createHash('sha256').update(newPassword).digest('hex');\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Deletes the current Token and set the player to offline.\r\n     * @method\r\n     * @param {string} [token] - The authorization/authentication token.\r\n     * @returns {boolean}\r\n     */\r\n    logout(token:string){\r\n        if(this.verifyToken(token)) {\r\n            this.removeToken(token);\r\n            this.data = Array();  //Clear all data\r\n            this.online = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Forces the logout with or without token.\r\n     * @returns {boolean}\r\n     */\r\n    logout_force(){\r\n        this.data = Array();  //Clear all data\r\n        this.online = false;\r\n        return true;\r\n    }\r\n    /**\r\n     * Get an array with all the gdobjects.\r\n     * @method\r\n     * @returns {Array}\r\n     */\r\n    getObjects(){\r\n        return this.data;\r\n    }\r\n\r\n    /**\r\n     * Update gdobjects\r\n     * @param {string} [token] - The authorization/authentication token.\r\n     * @param {Array<gdobject>} [objectArray] - An array with all the gdobjects.\r\n     */\r\n    updateObjects(token:string, objectArray:gdobject[]){\r\n        // Auth\r\n        if(!this.verifyToken(token)){return false}\r\n        // Object Update\r\n        this.data = objectArray;\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check if is a moderator.\r\n     * @return {boolean}\r\n     */\r\n    isMod(){\r\n        return this.moderator;\r\n    }\r\n    /**\r\n     * Serialize and returns the player data.\r\n     * @method\r\n     * @param {player} [playerInstance] - The player instance where the data should be loaded from.\r\n     * @returns {Array}\r\n     */\r\n    static serialize(playerInstance:player){\r\n        let data = {};\r\n        data[\"username\"] = playerInstance.username;\r\n        data[\"uuid\"] = playerInstance.uuid;\r\n        data[\"password\"] = playerInstance._password;\r\n        data[\"moderator\"] = playerInstance.moderator;\r\n        return data;\r\n    }\r\n    /**\r\n     * Loads player data from an array.\r\n     * @method\r\n     * @param {player} [playerInstance] - The player instance where the data should be loaded.\r\n     * @param {Array} [data] - The serialized player data.\r\n     * @returns {player}\r\n     */\r\n    static loadData(playerInstance:player, data:[]){\r\n        playerInstance.username = data[\"username\"];\r\n        playerInstance.uuid = data[\"uuid\"];\r\n        playerInstance._password = data[\"password\"];\r\n        playerInstance.moderator = data[\"moderator\"];\r\n        return true;\r\n    }\r\n}\r\nexports.gdobject = gdobject;\r\nexports.player = player;"]}